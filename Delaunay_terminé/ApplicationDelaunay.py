# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interfaceQT_2.0.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# Imports
import sys
import random
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import qApp
from Delaunay_Copy import *
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from point import *
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtCore import QCoreApplication
import time
from mplwidget import MplWidget
import Image_background
from Arete import *
from numpy import *


class Ui_Maillage(object):

    def setupUi(self, Maillage):
        self.delaunay = 0

        # on crée le maillage de l'interface
        Maillage.setObjectName("Maillage")
        Maillage.resize(909, 907)
        Maillage.setStyleSheet("")
        Maillage.setIconSize(QtCore.QSize(2000, 1500))
        Maillage.setMinimumSize(900, 900)
        Maillage.setMaximumSize(900, 900)
        self.mainWidget = QtWidgets.QWidget(Maillage)
        self.mainWidget.setObjectName("mainWidget")

        # on créé le bouttton pour charger le fichier
        self.Boutton_charger = QtWidgets.QPushButton(self.mainWidget)
        self.Boutton_charger.setGeometry(QtCore.QRect(5, 75, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Sitka Heading")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.Boutton_charger.setFont(font)
        self.Boutton_charger.setObjectName("Boutton_charger")
        self.Boutton_charger.clicked.connect(self.charger_fichier)

        # on créé le boutton pour tracer la triangulation
        self.Boutton_Delaunay = QtWidgets.QPushButton(self.mainWidget)
        self.Boutton_Delaunay.setGeometry(QtCore.QRect(5, 145, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Sitka Heading")
        font.setPointSize(12)
        self.Boutton_Delaunay.setFont(font)
        self.Boutton_Delaunay.setObjectName("Boutton_Delaunay")
        self.Boutton_Delaunay.clicked.connect(self.tracer_delaunay)
        
        
        # on créé le boutton pour tracer le diagramme de voronoi
        self.Boutton_Voronoi = QtWidgets.QPushButton(self.mainWidget)
        self.Boutton_Voronoi.setGeometry(QtCore.QRect(5, 225, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Sitka Heading")
        font.setPointSize(12)
        self.Boutton_Voronoi.setFont(font)
        self.Boutton_Voronoi.setObjectName("Boutton_Voronoi")
        self.Boutton_Voronoi.clicked.connect(self.tracer_voronoi)
        

        # on créé un boutton à cocher pour sélectionner si on affiche les cercle
        self.Check_cercle = QtWidgets.QCheckBox(self.mainWidget)
        self.Check_cercle.setGeometry(QtCore.QRect(15, 195, 111, 16))
        font = QtGui.QFont()
        font.setFamily("Sitka Heading")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Check_cercle.setFont(font)
        self.Check_cercle.setAutoFillBackground(False)
        self.Check_cercle.setObjectName("Check_cercle")
        
        
        # on créé un boutton à cocher pour sélectionner si on affiche les centres des triangle
        self.Check_centre = QtWidgets.QCheckBox(self.mainWidget)
        self.Check_centre.setGeometry(QtCore.QRect(15, 275, 111, 16))
        font = QtGui.QFont()
        font.setFamily("Sitka Heading")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Check_centre.setFont(font)
        self.Check_centre.setAutoFillBackground(False)
        self.Check_centre.setObjectName("Check_centre")
        

        # on créé la zone de dessin
        self.Zone_dessin = QtWidgets.QGraphicsView(self.mainWidget)
        self.Zone_dessin.setGeometry(QtCore.QRect(185, 145, 711, 711))
        self.Zone_dessin.setObjectName("Zone_dessin")


        # on créé un boutton pour tracer le set  de points
        self.Boutton_Setpt = QtWidgets.QPushButton(self.mainWidget)
        self.Boutton_Setpt.setGeometry(QtCore.QRect(5, 305, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Sitka Heading")
        font.setPointSize(12)
        self.Boutton_Setpt.setFont(font)
        self.Boutton_Setpt.setObjectName("Boutton_Vornoi")
        self.Boutton_Setpt.clicked.connect(self.afficher_set)

        # on créé un boutton pour effacer le canvas
        self.Boutton_effacer = QtWidgets.QPushButton(self.mainWidget)
        self.Boutton_effacer.setGeometry(QtCore.QRect(5, 375, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Sitka Heading")
        font.setPointSize(12)
        self.Boutton_effacer.setFont(font)
        self.Boutton_effacer.setObjectName("Boutton_effacer")
        self.Boutton_effacer.clicked.connect(self.effacer_canvas)

        # on créé un boutton pour sauvegarder l'image
        self.Boutton_Save = QtWidgets.QPushButton(self.mainWidget)
        self.Boutton_Save.setGeometry(QtCore.QRect(5, 445, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Sitka Heading")
        font.setPointSize(12)
        self.Boutton_Save.setFont(font)
        self.Boutton_Save.setObjectName("Boutton_Vornoi")
        self.Boutton_Save.clicked.connect(self.saveImage)

        # on créé le background de la fenetre
        self.label = QtWidgets.QLabel(self.mainWidget)
        self.label.setGeometry(QtCore.QRect(-130, -10, 1161, 1001))
        self.label.setStyleSheet("background-image:url(:/IMG/ensg.jpg)")
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(":/IMG/ensg.jpg"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")

        # on créé la zone de texte pour rentrer le nom du fichier
        self.lineEdit = QtWidgets.QLineEdit(self.mainWidget)
        self.lineEdit.setGeometry(QtCore.QRect(185, 75, 711, 41))
        self.lineEdit.setObjectName("lineEdit")
        self.filename = "oui"

        # on créé le plot pour dessiner la triangulation
        self.Mplwidget = MplWidget(self.mainWidget)
        self.Mplwidget.setGeometry(QtCore.QRect(185, 145, 711, 711))
        self.Mplwidget.setObjectName("Mplwidget")

        # on met tous les widgets au premier plan
        self.label.raise_()
        self.Boutton_charger.raise_()
        self.Boutton_Delaunay.raise_()
        self.Boutton_Voronoi.raise_()
        self.Check_cercle.raise_()
        self.Check_centre.raise_()
        self.Zone_dessin.raise_()
        self.Boutton_Setpt.raise_()
        self.Boutton_Save.raise_()
        self.Boutton_effacer.raise_()
        self.lineEdit.raise_()
        self.Mplwidget.raise_()

        Maillage.setCentralWidget(self.mainWidget)

        # on créé la barre de menu
        self.menubar = QtWidgets.QMenuBar(Maillage)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 909, 21))
        self.menubar.setObjectName("menubar")
        self.menuLol = QtWidgets.QMenu(self.menubar)
        self.menuLol.setObjectName("menuLol")
        Maillage.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Maillage)
        self.statusbar.setObjectName("statusbar")
        Maillage.setStatusBar(self.statusbar)
        self.actionQuitter = QtWidgets.QAction(Maillage)
        self.actionQuitter.setObjectName("actionQuitter")
        self.actionQuitter.triggered.connect(self.fermer_fenetre)
        self.menuLol.addAction(self.actionQuitter)
        self.menubar.addAction(self.menuLol.menuAction())

        # on transforme les noms des widgets en le texte voulu
        self.retranslateUi(Maillage)
        QtCore.QMetaObject.connectSlotsByName(Maillage)

    def retranslateUi(self, Maillage):
        _translate = QtCore.QCoreApplication.translate
        Maillage.setWindowTitle(_translate("Maillage", "Maillage"))
        self.Boutton_charger.setText(_translate("Maillage", "Charger un fichier"))
        self.Boutton_Delaunay.setText(_translate("Maillage", "Tracer Delaunay"))
        self.Boutton_Voronoi.setText(_translate("Maillage", "Tracer Voronoi"))
        self.Check_cercle.setText(_translate("Maillage", "Voir les cercles"))
        self.Check_centre.setText(_translate("Maillage", "Voir les centres"))
        self.Boutton_Setpt.setText(_translate("Maillage", "Afficher set de point"))
        self.Boutton_Save.setText(_translate("Maillage", "Enregistrer l'image"))
        self.Boutton_effacer.setText(_translate("Maillage", "Effacer le canvas"))
        self.menuLol.setTitle(_translate("Maillage", "File"))
        self.actionQuitter.setText(_translate("Maillage", "Quitter"))

    # on créé les méthodes liées aux boutons------------------------------------

    def charger_fichier(self):
        """Cette methode récupère le contenu de la boite edit et ouvre le
        fichier situé à l'emplacement correspondant"""

        self.filename, _ = QFileDialog.getOpenFileName(None, 'Open File')
        self.lineEdit.setText(self.filename)
        txt = str(self.lineEdit.text())
        if not self.lineEdit.text():
            msg = QMessageBox(QMessageBox.Warning, "Erreur", "Saisir un nom de fichier", QMessageBox.Ok)
            msg.exec_()
            return
        print("fichié chargé:    " + txt)


    def afficher_set(self):
        """" Cette méthode récupère la liste des points du set de points
        que l'on souhaite trianguler et les plot sur le canvas"""
        try:
            delaunaytest = Delaunay(self.filename)
            print("Nombre de points:   " + str(len(delaunaytest.listPoints_)))
            self.Mplwidget.plot_set(delaunaytest)
            self.Mplwidget.redraw()
        except(FileNotFoundError):
            print("Nom du fichier érroné")


    def tracer_delaunay(self):
        """"Cette méthode est la méthode principale, elle récupère la
        triangulation initiale et procère à l'itération de l'agorithme
        puis parcours la liste des triangle et les plot dans le canvas"""
        self.delaunay = 1
        cercles = 0
        if self.Check_cercle.isChecked():
            cercles = 1
        try:
            delaunaytest = Delaunay(self.filename)
            for point in delaunaytest.listPoints_:
                liste_triangle = delaunaytest.delaunay_iter(point)
                liste_triangle = delaunaytest.mise_a_jour()

            self.Mplwidget.canvas.ax.cla()  # on nettoie le canvas pour éviter les supperpositions de triangulations
            liste_triangle = delaunaytest.finalisation()
            liste_triangle = delaunaytest.mise_a_jour()
            print("nombre de triangles:  " + str(len(liste_triangle)))
            color = 1000 * ['g', 'b', 'r', "c", "m", "k",
                           "y"]  # on génere une liste de couleurs qui se répète pour pouvoir distinguer les triangles entre eux
            for triangle in liste_triangle:

                couleur = color.pop(0)
                self.Mplwidget.plot_triangle(triangle,couleur)

                if cercles == 1:
                    self.Mplwidget.plot_cercle(triangle, couleur)
                
            self.Mplwidget.redraw()

        except(
        FileNotFoundError):  # dans le cas ou aucun fichié n'a été chargé, on ouvre une boite qui va nous faire charger un fichier
            self.filename, _ = QFileDialog.getOpenFileName(None, 'Open File')
            self.lineEdit.setText(self.filename)
            txt = str(self.lineEdit.text())
            if not self.lineEdit.text():  # si le fichier n'est pas bon, on affiche une boite de dialogue qui indique que le nom du fichier n'est pas bon
                msg = QMessageBox(QMessageBox.Warning, "Erreur", "Saisir un nom de fichier", QMessageBox.Ok)
                msg.exec_()
                return
            print("fichié chargé:    " + txt)
            self.tracer_delaunay()  # après avoir chargé le fichier on relance la triangulation


    def tracer_voronoi(self):
        try:
            delaunaytest = Delaunay(self.filename)
            for point in delaunaytest.listPoints_:
                liste_triangle = delaunaytest.delaunay_iter(point)
                liste_triangle = delaunaytest.mise_a_jour()

            
            liste_triangle = delaunaytest.finalisation()
            liste_triangle = delaunaytest.mise_a_jour()
            list_demi_droite = []
            liste_arete_voronoi =[]
            if self.delaunay == 0:
                #dans le cas ou la triangulationde delaunay n'est pas tracée il faut trouver les bonnes dimensions pour le canvas
                self.tracer_delaunay()
                
                Ymin , Ymax = self.Mplwidget.canvas.ax.get_ylim()[0],self.Mplwidget.canvas.ax.get_ylim()[1]
                Xmin , Xmax = self.Mplwidget.canvas.ax.get_xlim()[0], self.Mplwidget.canvas.ax.get_xlim()[1]
                self.Mplwidget.canvas.ax.cla()  # on nettoie le canvas pour éviter les supperpositions de triangulations
            
                self.Mplwidget.canvas.ax.set_xlim(Xmin,Xmax)
                self.Mplwidget.canvas.ax.set_ylim(Ymin,Ymax) 
            
            
            Ymin , Ymax = self.Mplwidget.canvas.ax.get_ylim()[0],self.Mplwidget.canvas.ax.get_ylim()[1]
            Xmin , Xmax = self.Mplwidget.canvas.ax.get_xlim()[0], self.Mplwidget.canvas.ax.get_xlim()[1]
            self.Mplwidget.canvas.ax.set_xlim(Xmin,Xmax)
            self.Mplwidget.canvas.ax.set_ylim(Ymin,Ymax) 
            a1 = Arete(Point(Xmin,Ymin),Point(Xmax,Ymin))
            a2 = Arete(Point(Xmin,Ymax),Point(Xmax,Ymax))
            a3 = Arete(Point(Xmin,Ymax),Point(Xmin,Ymin))
            a4 = Arete(Point(Xmax,Ymax),Point(Xmax,Ymin))
            
            
            for triangle in delaunaytest.mise_a_jour():
                list_voisin,l_arete_commun = delaunaytest.get_voisin_triangle(triangle)

                if len(list_voisin)== 3:
                    for voisin in list_voisin:
                        arete = Arete(triangle.get_centreCercle(),voisin.get_centreCercle())
                        liste_arete_voronoi.append(arete)

                if len(list_voisin)== 2:
                    for voisin in list_voisin:
                        arete = Arete(triangle.get_centreCercle(),voisin.get_centreCercle())
                        liste_arete_voronoi.append(arete)

                    for arete in triangle.get_arete():
                        if not(arete in l_arete_commun):
                            centre = triangle.get_centreCercle()
                            

                            med = arete.mediatrice()
                            insct1 = med.intersection(a1.get_droite())
                            insct2 = med.intersection(a2.get_droite())
                            insct3 = med.intersection(a3.get_droite())
                            insct4 = med.intersection(a4.get_droite())
                            med = []
                            lmed = []
                            if not(type(insct1) == str):
                                med1 = Arete(centre,insct1)
                                med.append(med1)
                                lmed.append(med1.longueur())
                            if not(type(insct2) == str):
                                med2 = Arete(centre,insct2)
                                med.append(med2)
                                lmed.append(med2.longueur())
                            if not(type(insct3) == str):
                                med3 = Arete(centre,insct3)
                                med.append(med3)
                                lmed.append(med3.longueur())
                            if not(type(insct4) == str):
                                med4 = Arete(centre,insct4)
                                med.append(med4)
                                lmed.append(med4.longueur())
                            
                            for i in range(len(lmed)):
                                if lmed[i] == min(lmed):
                                    liste_arete_voronoi.append(med[i])
                                           
            
            if self.Check_centre.isChecked():
                self.Mplwidget.plot_centre(delaunaytest)
            
            for arete in liste_arete_voronoi:
                self.Mplwidget.plot_arete(arete,'black')
            
            
            
            
              
            self.Mplwidget.redraw()

        except(
        FileNotFoundError):  # dans le cas ou aucun fichié n'a été chargé, on ouvre une boite qui va nous faire charger un fichier
            self.filename, _ = QFileDialog.getOpenFileName(None, 'Open File')
            self.lineEdit.setText(self.filename)
            txt = str(self.lineEdit.text())
            if not self.lineEdit.text():  # si le fichier n'est pas bon, on affiche une boite de dialogue qui indique que le nom du fichier n'est pas bon
                msg = QMessageBox(QMessageBox.Warning, "Erreur", "Saisir un nom de fichier", QMessageBox.Ok)
                msg.exec_()
                return
            print("fichié chargé:    " + txt)
            self.tracer_voronoi()  # après avoir chargé le fichier on relance la triangulation
        

    def fermer_fenetre(self):
        """"cette fonction permet de fermer la fenêtre"""
        Maillage.close()


    def effacer_canvas(self):
        """cette fonction efface le canvas puis en redessine un propre"""
        self.delaunay = 0
        self.Mplwidget.effacer()
        self.Mplwidget.redraw()

    def saveImage(self):
        """Cette méthode fait appataitre une boite de dialogue qui demande le nom du fichier
        et sauvegarde le canvas avec le nom du fichier"""
        nomImage, done1 = QtWidgets.QInputDialog.getText(None, 'Input Dialog', 'Entrer le nom du fichier:')
        self.Mplwidget.plot_save(nomImage)


if __name__ == "__main__":
    import sys
    import Delaunay_Copy

    app = QtWidgets.QApplication(sys.argv)
    Maillage = QtWidgets.QMainWindow()
    ui = Ui_Maillage()
    ui.setupUi(Maillage)
    Maillage.show()
    sys.exit(app.exec_())
